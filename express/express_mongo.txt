What is Mongoose, and why do we use it with Express and MongoDB?

Answer:

Mongoose is an ODM (Object Data Modeling) library for MongoDB and Node.js. 
It provides a structured way to interact with MongoDB by allowing us to:

Define Schemas with strong typing and validations,
Create Models to interact with MongoDB collections,
Use helpful methods like .find(), .save(), .populate() etc.
Manage relations, middleware, and lifecycle hooks.

Mongoose simplifies database interaction and ensures our 
data adheres to a defined structure, which is especially useful in large-scale applications.

Example:

import mongoose from 'mongoose';

export const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log(`MongoDB connected: ${conn.connection.host}`);
  } catch (err) {
    console.error('MongoDB connection failed:', err.message);
    process.exit(1); // Exit the app if DB fails
  }
};

In real-world apps, I use .env files to manage secrets like MONGO_URI, and I call this function before the server starts.

----------------------------------------------------------------
How do you define a Mongoose schema and model? Can you give an example with validations (like required fields or default values)?

Answer:

In Mongoose, we define a Schema to set the structure of documents in a MongoDB collection.
The schema includes fields, their types, required validations, default values, and more.

After defining the schema, we create a Model, which acts as a wrapper to interact with the collection — 
such as performing find, create, update, and delete operations.

Example:
import mongoose from 'mongoose';

// 1. Define the schema
const userSchema = new mongoose.Schema(
  {
    userName: { type: String, required: true },
    age: { type: Number, required: true },
    accountStatus: { type: Boolean, required: true, default: false },
  },
  {
    timestamps: true,
  }
);

// 2. Create indexing for optimized queries
userSchema.index({ accountStatus: 1 });

// 3. Define and export the model
const UserModel = mongoose.models?.User || mongoose.model('User', userSchema);

export { UserModel };

NOTE:
timestamps: true automatically adds createdAt and updatedAt fields.

Indexing improves read performance. You can also use compound indexes for multi-field queries.

Using mongoose.models?.User avoids model overwrite errors during hot-reloading in dev environments

----------------------------------------------------------
How do you perform basic CRUD operations using Mongoose? (Create, Read, Update, Delete);

Answer:

1. Create a Document

import { UserModel } from './models/UserModel';

export const createUser = async (req, res) => {
  try {
    const newUser = new UserModel({
      userName: "nprawez",
      age: 27,
      accountStatus: true
    });

    const saveData = await newUser.save();
    console.log("User created successfully");
    res.status(201).json({ msg: "New user created", data: saveData });
  } catch (error) {
    console.error('Error saving user:', error);
    res.status(500).json({ msg: "Internal server error" });
  }
};

You can also use UserModel.create({...}) — it does validation + insert directly.

Difference:
save() → can create or update if used on an existing document.
create() → always inserts a new document.

2. Read / Fetch Documents

export const getUsers = async (req, res) => {
  try {
    const data = await UserModel.find({ userName: "nahid" });

    // Optional examples:
    // const singleUser = await UserModel.findOne({ userName: "nahid" });
    // const filteredFields = await UserModel.findOne({ userName: "nahid" }, { age: 1 });

    res.status(200).json({ msg: "Users fetched", data });
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ msg: "Internal server error" });
  }
};

You can apply .limit(), .sort(), .select(), or .lean() for optimization.

3. Update a Document

export const updateUser = async (req, res) => {
  try {
    const updated = await UserModel.findOneAndUpdate(
      { userName: "nahid" },
      { $set: { age: 30 } },
      { new: true } // returns updated doc
    );

    // OR use replace
    // const replaced = await UserModel.findOneAndReplace(
    //   { userName: "nahid" },
    //   { userName: "nahidprawez", age: 20, accountStatus: true }
    // );

    res.status(200).json({ msg: "User updated", data: updated });
  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({ msg: "Internal server error" });
  }
};

⚠️ Without $set, the whole document can get replaced unintentionally

4. Delete a Document
export const deleteUser = async (req, res) => {
  try {
    const deleted = await UserModel.findOneAndDelete({ userName: "nahid" });

    res.status(200).json({ msg: "User deleted", data: deleted });
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ msg: "Internal server error" });
  }
};

NOTES:

✅ find() → returns an array
✅ findOne() → returns a single document
✅ Always use try-catch and return proper status codes (200, 201, 400, 403, 500, etc.)
✅ Use .lean() if you don’t need Mongoose document features (improves performance)

---------------------


